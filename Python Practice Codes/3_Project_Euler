# -*- coding: utf-8 -*-
"""ProjectEuler.ipynb

Automatically generated by Colaboratory.

**Priblem 1**

**If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000**
"""

N = 20
sum = 0
for i in range(1000):
  if ((i%3 == 0) or (i%5 == 0)):
    sum += i
else:
  print(sum)

"""**Priblem 2**

**Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:***

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

***By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.***
"""

n = 34  # for getting terms < 4,000,000 first 34 terms are sufficient
f1 = 0
f2 = 1
for x in range(1, n):
    next = f1 + f2
    f1 = f2
    f2 = next
    sumoffib = f1 +f2
      
print(printFibonacciNumbers(n))
print('sum of fib= ', sumoffib)

"""**using end='  '** """

n = int(input('No of terms in Fibonacci sequence: '))
def printFibonacciNumbers(n):
    f1 = 0
    f2 = 1
    if (n<1):
      return
    print(f1, end=' ')
    for x in range(1, n):
      print(f2, end=' ')
      next = f1 + f2
      f1 = f2
      f2 = next
print(printFibonacciNumbers(n))

"""**USing SET datatype** **all fib**"""

n = 33  # for getting terms < 4,000,000 first 34 terms are sufficient
f1 = 0
f2 = 1
sumoffib = 0
setoffib = {f1, f2}
for x in range(1, n):
    next = f1 + f2
    f1 = f2
    f2 = next
    setoffib.add(f2)
    sumoffib = sumoffib +f2
print(sorted(setoffib))
print('sum of fib= ', sumoffib)

"""**Sum of even terms in fibonacci**"""

n = 33            # for getting sum < 4,000,000 first 33 terms are sufficient
f1 = 0
f2 = 1
sumoffib = f1 + f2
setoffib = {f1, f2}
for x in range(1, n):
    next = f1 + f2
    f1 = f2
    f2 = next
    if f2%2 == 0:
      continue
    setoffib.add(f2)
    sumoffib = sumoffib +f2
print(sorted(setoffib))
print('sum of fib= ', sumoffib)

#Using a recursive function

def fib(num):
      '''
      recursive function to calculate fibonacci serise 
      '''
      return num if num <= 1 else fib(num-1) + fib(num-2)

nterm = int(input("Enter the number of terms in fibonacci serise:  "))
for num in range(nterm):
      print(fib(num), end="   ")

def get_even_fib_sum(N):
    fib_list = [0,1] 
    for i in range(N):
        fib_list.append(fib_list[i+1] + fib_list[i])
        #if fib_list[i+2] > 4000000:
        #fib_list.pop(i+2)
            #break

    return (fib_list)

all_fib_terms = get_even_fib_sum(33)
all_fib_terms

b = sum(all_fib_terms)
print(b)

"""**Problem 3**

***Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.***
"""

sum_of_squares = 0
square_of_sum = 0
for i in range(1,101,1):     # 1 is inclusive and 11 is exclusive
    sum_of_squares += i**2
    square_of_sum += i
print(sum_of_squares)
print(square_of_sum**2)
print(square_of_sum**2 - sum_of_squares)

"""***Now trying to use function for above problem for diff between sum of squares and square of sum of first N numbers***"""

def diff_sumofsq_n_sqofsum(N):
    sum_of_squares = 0
    square_of_sum = 0
    for i in range(1,N+1):    
       sum_of_squares += i**2
       square_of_sum += i
    diff = square_of_sum**2 - sum_of_squares 
    return diff


print(diff_sumofsq_n_sqofsum(25))
print(diff_sumofsq_n_sqofsum(50))
print(diff_sumofsq_n_sqofsum(100))
diff_sumofsq_n_sqofsum(5)     #this get executed only but only latest value is printted
diff_sumofsq_n_sqofsum(10)

"""***Problem 4***


By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
"""





"""Even fibonacci serise using **filter**"""

n = 20  # for getting terms < 4,000,000 first 34 terms are sufficient
f1 = 0
f2 = 1
sumoffib = 0
listoffib = [f1, f2]
for x in range(1, n):
    next = f1 + f2
    f1 = f2
    f2 = next
    listoffib.append(f2)
    sumoffib = sumoffib +f2
print(sorted(setoffib))
print('sum of fib= ', sumoffib)

help("math")

